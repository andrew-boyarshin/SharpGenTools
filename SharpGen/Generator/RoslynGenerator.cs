using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using SharpGen.Logging;
using SharpGen.Model;
using SharpGen.Transform;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SharpGen.Generator
{
    public sealed class RoslynGenerator
    {
        private const string AutoGeneratedCommentText = "// <auto-generated/>\n";

        public IGeneratorRegistry Generators { get; }

        public Logger Logger { get; }

        public RoslynGenerator(Logger logger, GlobalNamespaceProvider globalNamespace, IDocumentationLinker documentation, ExternalDocCommentsReader docReader, GeneratorConfig config)
        {
            Logger = logger;
            Generators = new DefaultGenerators(globalNamespace, documentation, docReader, config, logger);
        }

        [Obsolete]
        public static IList<string> GetFilePathsForGeneratedFiles(CsAssembly assembly, string generatedCodeFolder)
        {
            if (string.IsNullOrEmpty(generatedCodeFolder))
                throw new ArgumentException("Value cannot be null or empty.", nameof(generatedCodeFolder));

            var results = new List<string>
            {
                Path.Combine(generatedCodeFolder, "LocalInterop.cs"),
                Path.Combine(generatedCodeFolder, "Enumerations.cs"),
                Path.Combine(generatedCodeFolder, "Structures.cs"),
                Path.Combine(generatedCodeFolder, "Interfaces.cs"),
                Path.Combine(generatedCodeFolder, "Functions.cs")
            };

            return results;
        }

        public void Run(CsAssembly csAssembly, string generatedCodeFolder)
        {
            if (string.IsNullOrEmpty(generatedCodeFolder))
                throw new ArgumentException("Value cannot be null or empty.", nameof(generatedCodeFolder));

            var directoryToCreate = new HashSet<string>(StringComparer.CurrentCulture);

            // Remove the generated directory before creating it
            if (!directoryToCreate.Contains(generatedCodeFolder))
            {
                directoryToCreate.Add(generatedCodeFolder);
                if (Directory.Exists(generatedCodeFolder))
                {
                    foreach (var oldGeneratedFile in Directory.EnumerateFiles(generatedCodeFolder, "*.cs", SearchOption.AllDirectories))
                    {
                        try
                        {
                            File.Delete(oldGeneratedFile);
                        }
                        catch
                        {
                            // ignored
                        }
                    }
                }
            }

            if (!Directory.Exists(generatedCodeFolder))
                Directory.CreateDirectory(generatedCodeFolder);

            Logger.Message("Process Assembly {0} => {1}", csAssembly.Name, generatedCodeFolder);

            var trees = new[]
            {
                CSharpSyntaxTree.Create(
                    CompilationUnit(
                            default,
                            default,
                            default,
                            SingletonList<MemberDeclarationSyntax>(
                                Generators.LocalInterop.GenerateCode(csAssembly)
                            )
                        )
                       .WithLeadingTrivia(Comment(AutoGeneratedCommentText))
                       .NormalizeWhitespace(elasticTrivia: true),
                    path: Path.Combine(generatedCodeFolder, "LocalInterop.cs")
                ),
                CreateTree("Enumerations", ns => ns.Enums, Generators.Enum),
                CreateTree("Structures", ns => ns.Structs, Generators.Struct),
                CreateTree("Functions", ns => ns.Classes, Generators.Group),
                CreateTree("Interfaces", ns => ns.Interfaces, Generators.Interface)
            };

            SyntaxTree CreateTree<T>(string fileName, Func<CsNamespace, IEnumerable<T>> membersFunc,
                                     IMultiCodeGenerator<T, MemberDeclarationSyntax> generator) where T : CsBase =>
                CSharpSyntaxTree.Create(
                    GenerateCompilationUnit(
                        csAssembly.Namespaces.Select(
                            ns => GenerateNamespaceDeclaration(ns, membersFunc(ns), generator)
                        )
                    ),
                    path: Path.Combine(generatedCodeFolder, $"{fileName}.cs")
                );

            foreach (var tree in trees)
                File.WriteAllText(tree.FilePath, tree.GetCompilationUnitRoot().ToFullString());
        }

        private static CompilationUnitSyntax GenerateCompilationUnit(
            IEnumerable<NamespaceDeclarationSyntax> namespaceDeclarations
        ) => CompilationUnit(
            default,
            default,
            default,
            List<MemberDeclarationSyntax>(
                namespaceDeclarations
            )
        ).NormalizeWhitespace(elasticTrivia: true);

        private static NamespaceDeclarationSyntax GenerateNamespaceDeclaration<T>(
            CsBase csNamespace, IEnumerable<T> elements, IMultiCodeGenerator<T, MemberDeclarationSyntax> generator
        ) where T : CsBase => NamespaceDeclaration(
            ParseName(csNamespace.Name),
            default,
            default,
            List(elements.OrderBy(element => element.Name).SelectMany(generator.GenerateCode))
        ).WithLeadingTrivia(Comment(AutoGeneratedCommentText));
    }
}
